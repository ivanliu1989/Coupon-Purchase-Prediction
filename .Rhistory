}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="win")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server Native Client 10.0};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="win")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
install.packages('RODBC')
install.packages("RODBC")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
library(RODBC)
odbcDataSources()
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
odbcDriverConnect()
odbcDataSources()
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
ound(cor(iris[,1:4]), 2)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3])#, col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
setwd('/Users/ivanliu/Downloads/kaggle/Coupon-Purchase-Prediction')
rm(list=ls());gc()
load('../data/model_based_data.RData')
plocation <- read.csv("../data/en/prefecture_locations_en.csv")
str(plocation)
load('../data/model_based_data.RData',stringsAsFactor=F)
plocation <- read.csv("../data/en/prefecture_locations_en.csv",stringsAsFactor=F)
str(plocation)
library(geosphere)
distance <- do.call(rbind, lapply(1:nrow(plocation), FUN=function(i){
dist <- do.call(rbind, lapply(1:nrow(plocation), FUN=function(j){
d <- c(as.character(plocation[i,1]), as.character(plocation[j,1]), distCosine(plocation[i,3:2], plocation[j,3:2])/1000)
return(d)
}))
return(dist)
}))
str(distance)
head(distance)
distance <- as.data.frame(distance)
head(distance)
str(distance)
distance <- do.call(rbind, lapply(1:nrow(plocation), FUN=function(i){
dist <- do.call(rbind, lapply(1:nrow(plocation), FUN=function(j){
d <- c(as.character(plocation[i,1]), as.character(plocation[j,1]), distCosine(plocation[i,3:2], plocation[j,3:2])/1000)
return(d)
}))
return(dist)
}))
class(distance)
distance <- as.data.matrix(distance)
names(distance) <- c('en_pref','en_ken', 'distance_km')
class(distance)
head(distance)
distance <- as.data.frame(distance)
names(distance) <- c('en_pref','en_ken', 'distance_km')
?merge
all_loc <- merge(all, distance, all.x=T, by=c('en_pref','en_ken'))
head(all_loc)
table(all_loc$distance_km)
range(all_loc$distance_km)
all_loc$distance_km
all_loc$distance_km[1]
all_loc$distance_km[1] - all_loc$distance_km[2]
as.numeric(all_loc$distance_km[1])
as.numeric(all_loc$distance_km[10000])
as.numeric(all_loc$distance_km[10000000])
as.numeric(all_loc$distance_km[100000])
as.numeric(levels(distance$distance_km))[distance$distance_km]
distance$distance_km <- as.numeric(levels(distance$distance_km))[distance$distance_km]
### 4.Geographic features
rm(list=ls());gc()
load('../data/model_based_data.RData')
plocation <- read.csv("../data/en/prefecture_locations_en.csv",stringsAsFactor=F)
# en_ken (shop prefecture) | en_pref (customer prefecture)
library(geosphere)
distance <- do.call(rbind, lapply(1:nrow(plocation), FUN=function(i){
dist <- do.call(rbind, lapply(1:nrow(plocation), FUN=function(j){
d <- c(as.character(plocation[i,1]), as.character(plocation[j,1]), distCosine(plocation[i,3:2], plocation[j,3:2])/1000)
return(d)
}))
return(dist)
}))
distance$distance_km <- as.numeric(levels(distance$distance_km))[distance$distance_km]
distance <- as.data.frame(distance)
distance$distance_km <- as.numeric(levels(distance$distance_km))[distance$distance_km]
names(distance) <- c('en_pref','en_ken', 'distance_km')
distance$distance_km <- as.numeric(levels(distance$distance_km))[distance$distance_km]
head(distance)
str(distance)
all_loc <- merge(all, distance, all.x=T, by=c('en_pref','en_ken'))
head(all_loc)
range(all_loc$distance_km)
range(all_loc$distance_km, na.rm = T)
ls()
save(all_loc, file='../data/model_based_data.RData')
rm(list=ls());gc()
load('../data/model_based_data.RData')
head(all_loc)
dim(all_loc)
table(all_loc$flag)
head(all_loc,2)
names(all_loc)
all <- all_loc[,c(3:4,7:8,9:11,27:28,1:2,34,18:26,12:17,29:32,6,5,33)]
head(all,2)
dim(all);dim(all_loc)
identical(names(all)[sort(names(all))], names(all_loc)[sort(names(all_loc))])
save(all, file='../data/model_based_data.RData')
rm(list=ls());gc()
load('../data/model_based_data.RData')
ls()
head(all)
table(all$en_capsile)
table(all$en_capsule)
table(all$en_genre)
table(all$en_small_area)
table(all$en_large_area)
table(all$en_pref)
table(all$I_Date)
all <- all[,-c('en_small_area', 'DISPFROM', 'DISPEND', 'VALIDFROM', 'VALIDEND', 'REG_DATE', 'WITHDRAW_DATE', 'I_Date')]
all <- all[,-which(names(all) %in% c('en_small_area', 'DISPFROM', 'DISPEND', 'VALIDFROM', 'VALIDEND', 'REG_DATE', 'WITHDRAW_DATE', 'I_Date'))]
head(all,2)
dim(all)
table(all$en_capsule)
table(is.na(all$en_capsule))
dim(all)
table(is.na(all$en_genre))
table(is.na(all$PRICE_RATE))
table(is.na(all$CATALOG_PRICE))
table(is.na(all$en_larger_area))
table(all$en_larger_area)
table(is.na(all$en_large_area))
head(all,2)
table(is.na(all$en_pref))
table(is.na(all$en_ken))
table(is.na(all$distance_km))
table(is.na(all$USABLE_DATE_MON))
table(is.na(all$USABLE_DATE_TUE))
table(is.na(all$USABLE_DATE_WED))
table(is.na(all$USABLE_DATE_THU))
table(is.na(all$USABLE_DATE_FRI))
table(is.na(all$USABLE_DATE_SAT))
table(is.na(all$USABLE_DATE_SUN))
table(is.na(all$USABLE_DATE_HOLIDAY))
table(is.na(all$USABLE_DATE_BEFORE_HOLIDAY))
table(is.na(all$DISPPERIOD))
table(is.na(all$VALIDPERIOD))
table(is.na(all$SEX_ID))
table(is.na(all$AGE))
table(is.na(all$flag))
table(is.na(all$PURCHASE_FLG))
head(all)
names(PURCHASE_FLG)
names(all)
head(all[,12:20])
all[,12:20][is.na(all[,12:20])]
all[,12:20][is.na(all[,12:20])] <- 1
table(is.na(all$USABLE_DATE_BEFORE_HOLIDAY))
head(all)
all$en_pref[is.na(all$en_pref)]
all$en_pref[is.na(all$en_pref)] <- 'NULL'
is.na(all$en_pref)
all$en_pref[is.na(all$en_pref)]
all$distance_km[is.na(all$distance_km)]
mean(all$distance_km)
mean(all$distance_km, na.rm=T)
all$distance_km[is.na(all$distance_km)] <- mean(all$distance_km, na.rm=T)
all$VALIDPERIOD[is.na(all$VALIDPERIOD)]
mean(all$VALIDPERIOD, na.rm=T)
all$VALIDPERIOD[is.na(all$VALIDPERIOD)] <- mean(all$VALIDPERIOD, na.rm=T)
str(all)
for (i in 12:20){
all[,i] <- as.factor(all[,i])
}
str(all)
is.numeric(all[,5])
is.numeric(all[,6])
for(i in 1:ncol(all)){
if(is.numeric(all[,i])){
scaled = as.numeric(scale(all[,i]))
all[,i] = scaled[1:nrow(all)]
print(i)
}
}
head(all)
rm(list=ls());gc()
load('../data/model_based_data.RData')
# remove: en_small_area, DISPFROM, DISPEND, VALIDFROM, VALIDEND, REG_DATE, WITHDRAW_DATE, I_Date
# new feature: member_yr, holiday?, I_Date-DISPPERIOD
all <- all[,-which(names(all) %in% c('en_small_area', 'DISPFROM', 'DISPEND', 'VALIDFROM', 'VALIDEND', 'REG_DATE', 'WITHDRAW_DATE', 'I_Date'))]
### 7.Imputation
# en_pref, distance_km, USABLE_DATE_MON, - USABLE_DATE_BEFORE_HOLIDAY, VALIDPERIOD
all[,12:20][is.na(all[,12:20])] <- 1
all$distance_km[is.na(all$distance_km)] <- mean(all$distance_km, na.rm=T)
all$VALIDPERIOD[is.na(all$VALIDPERIOD)] <- mean(all$VALIDPERIOD, na.rm=T)
for (i in 12:20){
all[,i] <- as.factor(all[,i])
print(i)
}
for(i in 1:(ncol(all)-2)){
if(is.numeric(all[,i])){
scaled = as.numeric(scale(all[,i]))
all[,i] = scaled[1:nrow(all)]
print(i)
}
}
head(all)
save(all, file='../data/model_based_data_impute_scale.RData')
